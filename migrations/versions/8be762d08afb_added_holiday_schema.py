"""added holiday schema

Revision ID: 8be762d08afb
Revises: 705a7ba7a182
Create Date: 2024-11-09 16:05:28.004641

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8be762d08afb'
down_revision = '705a7ba7a182'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('leaves')
    op.drop_table('experience_details')
    op.drop_table('regularizations')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('regularizations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('att_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('att_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comment', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Pending/Approved/Rejected'),
    sa.Column('label', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['att_id'], ['attendance.id'], name='regularizations_att_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='regularizations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='regularizations_pkey')
    )
    op.create_table('experience_details',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('designation', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('experience', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='experience_details_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='experience_details_pkey')
    )
    op.create_table('leaves',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comment', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Pending/Approved/Rejected'),
    sa.Column('applied_on', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('label', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('leave_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='leaves_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='leaves_pkey')
    )
    # ### end Alembic commands ###
